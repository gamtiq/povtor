{"version":3,"file":"povtor.m.js","sources":["../src/index.ts"],"sourcesContent":["export type RetryAction = (...args: unknown[]) => Promise<unknown> | unknown;\n\nexport type GetRetryTimeout = (result?: RetryResult) => unknown;\nexport type RetryTimeout = number | GetRetryTimeout;\n\nexport type RetryTest = (value?: unknown, result?: RetryResult) => boolean;\n\n/** Settings of {@link retry} function. */\nexport interface RetrySettings {\n    /** A function that should be called. */\n    action: RetryAction;\n    /** An object that should be used as `this` when calling the action function. */\n    actionContext?: unknown;\n    /** An array of parameters that should be passed into the action function. */\n    actionParams?: unknown[];\n    /**\n     * An amount of milliseconds before first call of the action function.\n     * When the value is not specified or is negative, the action function will be called immediately first time.\n     */\n    delay?: number;\n    /**\n     * An array specifying amount and timeouts between repeated calls of the action function.\n     * Each item can be a number or a function (see `retryTimeout` setting for details).\n     * Has priority over `retryQty` and `retryTimeout` settings.\n     */\n    retryAttempts?: RetryTimeout[];\n    /**\n     * Maximum number of repeated calls of the action function. A negative value means no restriction.\n     * Default value is `-1`.\n     */\n    retryQty?: number;\n    /**\n     * A timeout between repeated calls of the action function, or a function that returns such timeout.\n     * A negative or non-number value means the repeat call will be made without delay (this is applied by default).\n     * If specified function returns `false` then retry process will be finished and result promise\n     * will be fulfilled or rejected depending on result of the last action's call.\n     */\n    retryTimeout?: RetryTimeout;\n    /**\n     * A boolean value or a function returning boolean value that specifies whether the action function\n     * should be called again when the action function throws an error or returned promise is rejected.\n     * When not specified the call of the action function will not be repeated on an error.\n     */\n    retryOnError?: boolean | RetryTest;\n    /**\n     * A boolean value or a function returning boolean value that specifies whether the action function\n     * should be called again after a made call. When not specified the action call will not be repeated.\n     */\n    retryTest?: boolean | RetryTest;\n    /**\n     * Time in milliseconds specifying how long retry process can last\n     * starting from call of `retry` function.\n     * Elapsed time is checked before each retry attempt and when the time exceeds the given limit\n     * process will be finished and result promise will be fulfilled or rejected\n     * depending on result of the last action's call.\n     * `0` or negative value means no limit.\n     */\n    timeLimit?: number;\n    [field: string]: unknown;\n}\n\nexport interface ValueResult {\n    /** Time in milliseconds when value was saved. */\n    time: number;\n    /** Result of action's call or value of promise fulfillment. */\n    value: unknown;\n}\n\nexport interface ErrorResult {\n    /** Error of action's call or value of promise rejection. */\n    error: unknown;\n    /** Time in milliseconds when error was saved. */\n    time: number;\n}\n\nexport type ActionCallResult = ValueResult | ErrorResult;\n\nexport interface WithPromiseField {\n    promise: Promise<unknown>;\n}\n\nexport interface RetryResult extends WithPromiseField {\n    /** Number of calls of the action function that have already made. */\n    attempt: number;\n    /** Last error or value of promise rejection. */\n    error: unknown;\n    /** Whether the last call of the action function is ended with error. */\n    isError: boolean;\n    /** Contains result of each call of the action function. */\n    result: ActionCallResult[];\n    /** Settings that were passed to `retry` function. */\n    settings: RetrySettings;\n    /** Time in milliseconds when `retry` function was called. */\n    startTime: number;\n    /** Function that can be used to stop the process of calls repeating. Returns value of `promise` field. */\n    stop: () => Promise<unknown>;\n    /** A boolean value that indicates whether the process of calls repeating is stopped. */\n    stopped: boolean;\n    /**\n     * A value of last successfull call of the action function. When the action function returns a promise,\n     * the value will be result of the promise fulfillment.\n     */\n    value: unknown;\n    /**\n     * A boolean value that indicates whether the action function is producing a result.\n     * Useful only when the action function returns a promise. Is set to `true` when the promise is pending.\n     */\n    valueWait: boolean;\n    /**\n     * A boolean value that indicates waiting of the next call of the action function.\n     * Is set to `true` during a timeout between calls.\n     */\n    wait: boolean;\n}\n\n/**\n * Call specified function and repeat calls depending on settings.\n *\n * @param settings\n *      Operation settings.\n */\nexport function retry(settings: RetrySettings): RetryResult {\n    let actionResult, resultReject, resultResolve, timeoutId;\n    // eslint-disable-next-line func-names, prefer-arrow-callback\n    const resultPromise = new Promise(function(resolve, reject) {\n        resultResolve = resolve;\n        resultReject = reject;\n    });\n    const callResultList: ActionCallResult[] = [];\n\n    const { retryTimeout } = settings;\n    let index = 0;\n    let stopped = false;\n\n    let attempts: number;\n    let { retryAttempts, timeLimit } = settings;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/prefer-optional-chain\n    if (retryAttempts && retryAttempts.length) {\n        attempts = retryAttempts.length + 1;\n    }\n    else {\n        retryAttempts = null;\n        const { retryQty } = settings;\n        if (typeof retryQty === 'number' && retryQty >= 0) {\n            attempts = retryQty + 1;\n        }\n        else {\n            attempts = -1;\n        }\n    }\n    if (typeof timeLimit !== 'number' || timeLimit < 0) {\n        timeLimit = 0;\n    }\n\n    function stopRetry(): Promise<unknown> {\n        if (! stopped) {\n            /* eslint-disable @typescript-eslint/no-use-before-define */\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n                retryResult.wait = false;\n            }\n            stopped = retryResult.stopped = true;\n            if (! retryResult.valueWait) {\n                resultResolve(retryResult.value);\n            }\n            /* eslint-enable @typescript-eslint/no-use-before-define */\n        }\n\n        return resultPromise;\n    }\n\n    const startTime = new Date().getTime();\n    const retryResult: RetryResult = {\n        attempt: index,\n        error: actionResult,\n        isError: false,\n        promise: resultPromise,\n        result: callResultList,\n        settings,\n        startTime,\n        stop: stopRetry,\n        stopped: false,\n        value: actionResult,\n        valueWait: false,\n        wait: false\n    };\n\n    function retryAction(): void {\n        retryResult.attempt = ++index;\n        retryResult.wait = false;\n        retryResult.valueWait = true;\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            actionResult = settings.action.apply(settings.actionContext || null, settings.actionParams || []);\n            if (actionResult && typeof actionResult === 'object' && typeof actionResult.then === 'function') {\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                actionResult.then(onActionEnd, onActionError);\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                onActionEnd(actionResult);\n            }\n        }\n        catch (e) {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            onActionError(e);\n        }\n    }\n\n    function end(): void {\n        if (retryResult.isError) {\n            resultReject(retryResult.error);\n        }\n        else {\n            resultResolve(retryResult.value);\n        }\n    }\n\n    // eslint-disable-next-line consistent-return\n    function repeat(): void {\n        let timeout;\n        if (index) {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            timeout = retryAttempts\n                ? retryAttempts.shift()\n                : retryTimeout;\n            if (typeof timeout === 'function') {\n                timeout = timeout(retryResult);\n                if (timeout === false) {\n                    return end();\n                }\n            }\n        }\n        else {\n            timeout = settings.delay;\n        }\n        if (attempts > 0) {\n            attempts--;\n        }\n        if (typeof timeout !== 'number' || timeout < 0) {\n            retryAction();\n        }\n        else {\n            retryResult.wait = true;\n            timeoutId = setTimeout(retryAction, timeout);\n        }\n    }\n\n    function next(test: unknown): void {\n        let proceed = test;\n        const result = {\n            time: new Date().getTime()\n        } as ActionCallResult;\n        let value;\n\n        if (retryResult.isError) {\n            value = (result as ErrorResult).error = retryResult.error;\n        }\n        else {\n            value = (result as ValueResult).value = retryResult.value;\n        }\n        retryResult.result.push(result);\n        retryResult.valueWait = false;\n\n        if (stopped || ! attempts) {\n            proceed = false;\n        }\n        else if (typeof proceed === 'function') {\n            proceed = proceed(value, retryResult);\n        }\n        if (proceed && (! timeLimit || new Date().getTime() - startTime <= timeLimit)) {\n            repeat();\n        }\n        else {\n            end();\n        }\n    }\n\n    function onActionEnd(value: unknown): void {\n        retryResult.value = value;\n        retryResult.isError = false;\n        next(settings.retryTest);\n    }\n\n    function onActionError(reason: unknown): void {\n        retryResult.error = reason;\n        retryResult.isError = true;\n        next(settings.retryOnError);\n    }\n\n    repeat();\n\n    return retryResult;\n}\n\n/**\n * Return value of `promise` field of the passed object.\n *\n * @param obj\n *      Object whose field should be returned.\n * @return\n *      Value of `promise` field of the passed object.\n * @author Denis Sikuler\n */\nexport function getPromiseField(obj: WithPromiseField): Promise<unknown> {\n    return obj.promise;\n}\n"],"names":["retry","settings","actionResult","resultReject","resultResolve","timeoutId","resultPromise","Promise","resolve","reject","callResultList","retryTimeout","index","stopped","attempts","retryAttempts","timeLimit","length","retryQty","stopRetry","clearTimeout","retryResult","wait","valueWait","value","startTime","Date","getTime","attempt","error","isError","promise","result","stop","retryAction","action","apply","actionContext","actionParams","then","onActionEnd","onActionError","e","end","repeat","timeout","shift","delay","setTimeout","next","test","proceed","time","push","retryTest","reason","retryOnError","getPromiseField","obj"],"mappings":"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"}