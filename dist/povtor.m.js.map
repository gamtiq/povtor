{"version":3,"file":"povtor.m.js","sources":["../src/index.ts"],"sourcesContent":["export type RetryAction = (...args: unknown[]) => Promise<unknown> | unknown;\n\nexport type GetRetryTimeout = (result?: RetryResult) => unknown;\nexport type RetryTimeout = number | GetRetryTimeout;\n\nexport type RetryTest = (value?: unknown, result?: RetryResult) => boolean;\n\n/** Settings of {@link retry} function. */\nexport interface RetrySettings {\n    /** A function that should be called. */\n    action: RetryAction;\n    /** An object that should be used as `this` when calling the action function. */\n    actionContext?: unknown;\n    /** An array of parameters that should be passed into the action function. */\n    actionParams?: unknown[];\n    /**\n     * An amount of milliseconds before first call of the action function.\n     * When the value is not specified or is negative, the action function will be called immediately first time.\n     */\n    delay?: number;\n    /**\n     * An array specifying amount and timeouts between repeated calls of the action function.\n     * Each item can be a number or a function (see `retryTimeout` setting for details).\n     * Has priority over `retryQty` and `retryTimeout` settings.\n     */\n    retryAttempts?: RetryTimeout[];\n    /**\n     * Maximum number of repeated calls of the action function. A negative value means no restriction.\n     * Default value is `-1`.\n     */\n    retryQty?: number;\n    /**\n     * A timeout between repeated calls of the action function, or a function that returns such timeout.\n     * A negative or non-number value means the repeat call will be made without delay (this is applied by default).\n     * If specified function returns `false` then retry process will be finished and result promise\n     * will be fulfilled or rejected depending on result of the last action's call.\n     */\n    retryTimeout?: RetryTimeout;\n    /**\n     * A boolean value or a function returning boolean value that specifies whether the action function\n     * should be called again when the action function throws an error or returned promise is rejected.\n     * When not specified the call of the action function will not be repeated on an error.\n     */\n    retryOnError?: boolean | RetryTest;\n    /**\n     * A boolean value or a function returning boolean value that specifies whether the action function\n     * should be called again after a made call. When not specified the action call will not be repeated.\n     */\n    retryTest?: boolean | RetryTest;\n    [field: string]: unknown;\n}\n\nexport interface ValueResult {\n    /** Time in milliseconds when value was saved. */\n    time: number;\n    /** Result of action's call or value of promise fulfillment. */\n    value: unknown;\n}\n\nexport interface ErrorResult {\n    /** Error of action's call or value of promise rejection. */\n    error: unknown;\n    /** Time in milliseconds when error was saved. */\n    time: number;\n}\n\nexport type ActionCallResult = ValueResult | ErrorResult;\n\nexport interface WithPromiseField {\n    promise: Promise<unknown>;\n}\n\nexport interface RetryResult extends WithPromiseField {\n    /** Number of calls of the action function that have already made. */\n    attempt: number;\n    /** Last error or value of promise rejection. */\n    error: unknown;\n    /** Whether the last call of the action function is ended with error. */\n    isError: boolean;\n    /** Contains result of each call of the action function. */\n    result: ActionCallResult[];\n    /** Settings that were passed to `retry` function. */\n    settings: RetrySettings;\n    /** Function that can be used to stop the process of calls repeating. Returns value of `promise` field. */\n    stop: () => Promise<unknown>;\n    /** A boolean value that indicates whether the process of calls repeating is stopped. */\n    stopped: boolean;\n    /**\n     * A value of last successfull call of the action function. When the action function returns a promise,\n     * the value will be result of the promise fulfillment.\n     */\n    value: unknown;\n    /**\n     * A boolean value that indicates whether the action function is producing a result.\n     * Useful only when the action function returns a promise. Is set to `true` when the promise is pending.\n     */\n    valueWait: boolean;\n    /**\n     * A boolean value that indicates waiting of the next call of the action function.\n     * Is set to `true` during a timeout between calls.\n     */\n    wait: boolean;\n}\n\n/**\n * Call specified function and repeat calls depending on settings.\n *\n * @param settings\n *      Operation settings.\n */\nexport function retry(settings: RetrySettings): RetryResult {\n    let actionResult, resultReject, resultResolve, timeoutId;\n    // eslint-disable-next-line func-names, prefer-arrow-callback\n    const resultPromise = new Promise(function(resolve, reject) {\n        resultResolve = resolve;\n        resultReject = reject;\n    });\n    const callResultList: ActionCallResult[] = [];\n\n    const { retryTimeout } = settings;\n    let index = 0;\n    let stopped = false;\n\n    let attempts: number;\n    let { retryAttempts } = settings;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/prefer-optional-chain\n    if (retryAttempts && retryAttempts.length) {\n        attempts = retryAttempts.length + 1;\n    }\n    else {\n        retryAttempts = null;\n        const { retryQty } = settings;\n        if (typeof retryQty === 'number' && retryQty >= 0) {\n            attempts = retryQty + 1;\n        }\n        else {\n            attempts = -1;\n        }\n    }\n\n    function stopRetry(): Promise<unknown> {\n        if (! stopped) {\n            /* eslint-disable @typescript-eslint/no-use-before-define */\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n                retryResult.wait = false;\n            }\n            stopped = retryResult.stopped = true;\n            if (! retryResult.valueWait) {\n                resultResolve(retryResult.value);\n            }\n            /* eslint-enable @typescript-eslint/no-use-before-define */\n        }\n\n        return resultPromise;\n    }\n\n    const retryResult: RetryResult = {\n        attempt: index,\n        error: actionResult,\n        isError: false,\n        promise: resultPromise,\n        result: callResultList,\n        settings,\n        stop: stopRetry,\n        stopped: false,\n        value: actionResult,\n        valueWait: false,\n        wait: false\n    };\n\n    function retryAction(): void {\n        retryResult.attempt = ++index;\n        retryResult.wait = false;\n        retryResult.valueWait = true;\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            actionResult = settings.action.apply(settings.actionContext || null, settings.actionParams || []);\n            if (actionResult && typeof actionResult === 'object' && typeof actionResult.then === 'function') {\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                actionResult.then(onActionEnd, onActionError);\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                onActionEnd(actionResult);\n            }\n        }\n        catch (e) {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            onActionError(e);\n        }\n    }\n\n    function end(): void {\n        if (retryResult.isError) {\n            resultReject(retryResult.error);\n        }\n        else {\n            resultResolve(retryResult.value);\n        }\n    }\n\n    // eslint-disable-next-line consistent-return\n    function repeat(): void {\n        let timeout;\n        if (index) {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            timeout = retryAttempts\n                ? retryAttempts.shift()\n                : retryTimeout;\n            if (typeof timeout === 'function') {\n                timeout = timeout(retryResult);\n                if (timeout === false) {\n                    return end();\n                }\n            }\n        }\n        else {\n            timeout = settings.delay;\n        }\n        if (attempts > 0) {\n            attempts--;\n        }\n        if (typeof timeout !== 'number' || timeout < 0) {\n            retryAction();\n        }\n        else {\n            retryResult.wait = true;\n            timeoutId = setTimeout(retryAction, timeout);\n        }\n    }\n\n    function onActionEnd(value: unknown): void {\n        retryResult.value = value;\n        retryResult.result.push({\n            value,\n            time: new Date().getTime()\n        });\n        retryResult.isError = false;\n        retryResult.valueWait = false;\n        let retryTest: unknown;\n        if (! stopped) {\n            retryTest = settings.retryTest;\n            if (! attempts) {\n                retryTest = false;\n            }\n            else if (typeof retryTest === 'function') {\n                retryTest = retryTest(value, retryResult);\n            }\n        }\n        if (retryTest) {\n            repeat();\n        }\n        else {\n            end();\n        }\n    }\n\n    function onActionError(reason: unknown): void {\n        retryResult.error = reason;\n        retryResult.result.push({\n            error: reason,\n            time: new Date().getTime()\n        });\n        retryResult.isError = true;\n        retryResult.valueWait = false;\n        let { retryOnError } = settings;\n        if (stopped || ! attempts) {\n            retryOnError = false;\n        }\n        else if (typeof retryOnError === 'function') {\n            retryOnError = retryOnError(reason, retryResult);\n        }\n        if (retryOnError) {\n            repeat();\n        }\n        else {\n            end();\n        }\n    }\n\n    repeat();\n\n    return retryResult;\n}\n\n/**\n * Return value of `promise` field of the passed object.\n *\n * @param obj\n *      Object whose field should be returned.\n * @return\n *      Value of `promise` field of the passed object.\n * @author Denis Sikuler\n */\nexport function getPromiseField(obj: WithPromiseField): Promise<unknown> {\n    return obj.promise;\n}\n"],"names":["retry","settings","actionResult","resultReject","resultResolve","timeoutId","resultPromise","Promise","resolve","reject","callResultList","retryTimeout","index","stopped","attempts","retryAttempts","length","retryQty","stopRetry","clearTimeout","retryResult","wait","valueWait","value","attempt","error","isError","promise","result","stop","retryAction","action","apply","actionContext","actionParams","then","onActionEnd","onActionError","e","end","repeat","timeout","shift","delay","setTimeout","push","time","Date","getTime","retryTest","reason","retryOnError","getPromiseField","obj"],"mappings":"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"}