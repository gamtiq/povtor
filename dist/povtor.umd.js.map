{"version":3,"file":"povtor.umd.js","sources":["../src/index.ts"],"sourcesContent":["export type RetryAction = (...args: unknown[]) => Promise<unknown> | unknown;\n\nexport type GetRetryTimeout = (result?: RetryResult) => unknown;\nexport type RetryTimeout = number | GetRetryTimeout;\n\nexport type RetryTest = (value?: unknown, result?: RetryResult) => boolean;\n\n/** Settings of {@link retry} function. */\nexport interface RetrySettings {\n    /** A function that should be called. */\n    action: RetryAction;\n    /** An object that should be used as `this` when calling the action function. */\n    actionContext?: unknown;\n    /** An array of parameters that should be passed into the action function. */\n    actionParams?: unknown[];\n    /**\n     * An amount of milliseconds before first call of the action function.\n     * When the value is not specified or is negative, the action function will be called immediately first time.\n     */\n    delay?: number;\n    /**\n     * An array specifying amount and timeouts between repeated calls of the action function.\n     * Each item can be a number or a function (see `retryTimeout` setting for details).\n     * Has priority over `retryQty` and `retryTimeout` settings.\n     */\n    retryAttempts?: RetryTimeout[];\n    /**\n     * Maximum number of repeated calls of the action function. A negative value means no restriction.\n     * Default value is `-1`.\n     */\n    retryQty?: number;\n    /**\n     * A timeout between repeated calls of the action function, or a function that returns such timeout.\n     * A negative or non-number value means the repeat call will be made without delay (this is applied by default).\n     * If specified function returns `false` then retry process will be finished and result promise\n     * will be fulfilled or rejected depending on result of the last action's call.\n     */\n    retryTimeout?: RetryTimeout;\n    /**\n     * A boolean value or a function returning boolean value that specifies whether the action function\n     * should be called again when the action function throws an error or returned promise is rejected.\n     * When not specified the call of the action function will not be repeated on an error.\n     */\n    retryOnError?: boolean | RetryTest;\n    /**\n     * A boolean value or a function returning boolean value that specifies whether the action function\n     * should be called again after a made call. When not specified the action call will not be repeated.\n     */\n    retryTest?: boolean | RetryTest;\n    [field: string]: unknown;\n}\n\nexport interface ValueResult {\n    /** Time in milliseconds when value was saved. */\n    time: number;\n    /** Result of action's call or value of promise fulfillment. */\n    value: unknown;\n}\n\nexport interface ErrorResult {\n    /** Error of action's call or value of promise rejection. */\n    error: unknown;\n    /** Time in milliseconds when error was saved. */\n    time: number;\n}\n\nexport type ActionCallResult = ValueResult | ErrorResult;\n\nexport interface WithPromiseField {\n    promise: Promise<unknown>;\n}\n\nexport interface RetryResult extends WithPromiseField {\n    /** Number of calls of the action function that have already made. */\n    attempt: number;\n    /** Last error or value of promise rejection. */\n    error: unknown;\n    /** Whether the last call of the action function is ended with error. */\n    isError: boolean;\n    /** Contains result of each call of the action function. */\n    result: ActionCallResult[];\n    /** Settings that were passed to `retry` function. */\n    settings: RetrySettings;\n    /** Function that can be used to stop the process of calls repeating. Returns value of `promise` field. */\n    stop: () => Promise<unknown>;\n    /** A boolean value that indicates whether the process of calls repeating is stopped. */\n    stopped: boolean;\n    /**\n     * A value of last successfull call of the action function. When the action function returns a promise,\n     * the value will be result of the promise fulfillment.\n     */\n    value: unknown;\n    /**\n     * A boolean value that indicates whether the action function is producing a result.\n     * Useful only when the action function returns a promise. Is set to `true` when the promise is pending.\n     */\n    valueWait: boolean;\n    /**\n     * A boolean value that indicates waiting of the next call of the action function.\n     * Is set to `true` during a timeout between calls.\n     */\n    wait: boolean;\n}\n\n/**\n * Call specified function and repeat calls depending on settings.\n *\n * @param settings\n *      Operation settings.\n */\nexport function retry(settings: RetrySettings): RetryResult {\n    let actionResult, resultReject, resultResolve, timeoutId;\n    // eslint-disable-next-line func-names, prefer-arrow-callback\n    const resultPromise = new Promise(function(resolve, reject) {\n        resultResolve = resolve;\n        resultReject = reject;\n    });\n    const callResultList: ActionCallResult[] = [];\n\n    const { retryTimeout } = settings;\n    let index = 0;\n    let stopped = false;\n\n    let attempts: number;\n    let { retryAttempts } = settings;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/prefer-optional-chain\n    if (retryAttempts && retryAttempts.length) {\n        attempts = retryAttempts.length + 1;\n    }\n    else {\n        retryAttempts = null;\n        const { retryQty } = settings;\n        if (typeof retryQty === 'number' && retryQty >= 0) {\n            attempts = retryQty + 1;\n        }\n        else {\n            attempts = -1;\n        }\n    }\n\n    function stopRetry(): Promise<unknown> {\n        if (! stopped) {\n            /* eslint-disable @typescript-eslint/no-use-before-define */\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n                retryResult.wait = false;\n            }\n            stopped = retryResult.stopped = true;\n            if (! retryResult.valueWait) {\n                resultResolve(retryResult.value);\n            }\n            /* eslint-enable @typescript-eslint/no-use-before-define */\n        }\n\n        return resultPromise;\n    }\n\n    const retryResult: RetryResult = {\n        attempt: index,\n        error: actionResult,\n        isError: false,\n        promise: resultPromise,\n        result: callResultList,\n        settings,\n        stop: stopRetry,\n        stopped: false,\n        value: actionResult,\n        valueWait: false,\n        wait: false\n    };\n\n    function retryAction(): void {\n        retryResult.attempt = ++index;\n        retryResult.wait = false;\n        retryResult.valueWait = true;\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            actionResult = settings.action.apply(settings.actionContext || null, settings.actionParams || []);\n            if (actionResult && typeof actionResult === 'object' && typeof actionResult.then === 'function') {\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                actionResult.then(onActionEnd, onActionError);\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                onActionEnd(actionResult);\n            }\n        }\n        catch (e) {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            onActionError(e);\n        }\n    }\n\n    function end(): void {\n        if (retryResult.isError) {\n            resultReject(retryResult.error);\n        }\n        else {\n            resultResolve(retryResult.value);\n        }\n    }\n\n    // eslint-disable-next-line consistent-return\n    function repeat(): void {\n        let timeout;\n        if (index) {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            timeout = retryAttempts\n                ? retryAttempts.shift()\n                : retryTimeout;\n            if (typeof timeout === 'function') {\n                timeout = timeout(retryResult);\n                if (timeout === false) {\n                    return end();\n                }\n            }\n        }\n        else {\n            timeout = settings.delay;\n        }\n        if (attempts > 0) {\n            attempts--;\n        }\n        if (typeof timeout !== 'number' || timeout < 0) {\n            retryAction();\n        }\n        else {\n            retryResult.wait = true;\n            timeoutId = setTimeout(retryAction, timeout);\n        }\n    }\n\n    function onActionEnd(value: unknown): void {\n        retryResult.value = value;\n        retryResult.result.push({\n            value,\n            time: new Date().getTime()\n        });\n        retryResult.isError = false;\n        retryResult.valueWait = false;\n        let retryTest: unknown;\n        if (! stopped) {\n            retryTest = settings.retryTest;\n            if (! attempts) {\n                retryTest = false;\n            }\n            else if (typeof retryTest === 'function') {\n                retryTest = retryTest(value, retryResult);\n            }\n        }\n        if (retryTest) {\n            repeat();\n        }\n        else {\n            end();\n        }\n    }\n\n    function onActionError(reason: unknown): void {\n        retryResult.error = reason;\n        retryResult.result.push({\n            error: reason,\n            time: new Date().getTime()\n        });\n        retryResult.isError = true;\n        retryResult.valueWait = false;\n        let { retryOnError } = settings;\n        if (stopped || ! attempts) {\n            retryOnError = false;\n        }\n        else if (typeof retryOnError === 'function') {\n            retryOnError = retryOnError(reason, retryResult);\n        }\n        if (retryOnError) {\n            repeat();\n        }\n        else {\n            end();\n        }\n    }\n\n    repeat();\n\n    return retryResult;\n}\n\n/**\n * Return value of `promise` field of the passed object.\n *\n * @param obj\n *      Object whose field should be returned.\n * @return\n *      Value of `promise` field of the passed object.\n * @author Denis Sikuler\n */\nexport function getPromiseField(obj: WithPromiseField): Promise<unknown> {\n    return obj.promise;\n}\n"],"names":["settings","actionResult","resultReject","resultResolve","timeoutId","attempts","resultPromise","Promise","resolve","reject","index","stopped","retryAttempts","length","retryQty","retryResult","attempt","error","isError","promise","result","stop","clearTimeout","wait","valueWait","value","retryAction","action","apply","actionContext","actionParams","then","onActionEnd","onActionError","e","end","repeat","timeout","shift","retryTimeout","delay","setTimeout","retryTest","push","time","Date","getTime","reason","retryOnError","obj"],"mappings":"0MA8GsBA,OACdC,EAAcC,EAAcC,EAAeC,EAY3CC,EAVEC,EAAgB,IAAIC,QAAQ,SAASC,EAASC,GAChDN,EAAgBK,EAChBN,EAAeO,qBAKfC,EAAQ,EACRC,GAAU,uBAKVC,GAAiBA,EAAcC,OAC/BR,EAAWO,EAAcC,OAAS,MAEjC,CACDD,EAAgB,KACRE,iBAEJT,EADoB,iBAAbS,GAAyBA,GAAY,EACjCA,EAAW,GAGV,MAqBdC,EAA2B,CAC7BC,QAASN,EACTO,MAAOhB,EACPiB,SAAS,EACTC,QAASb,EACTc,OA7CuC,YA8CvCpB,EACAqB,uBAvBMV,IAEEP,IACAkB,aAAalB,GACbW,EAAYQ,MAAO,GAEvBZ,EAAUI,EAAYJ,SAAU,EAC1BI,EAAYS,WACdrB,EAAcY,EAAYU,QAK3BnB,GAWPK,SAAS,EACTc,MAAOxB,EACPuB,WAAW,EACXD,MAAM,YAGDG,IACLX,EAAYC,UAAYN,EACxBK,EAAYQ,MAAO,EACnBR,EAAYS,WAAY,OAGpBvB,EAAeD,EAAS2B,OAAOC,MAAM5B,EAAS6B,eAAiB,KAAM7B,EAAS8B,cAAgB,MAClD,iBAAjB7B,GAA0D,mBAAtBA,EAAa8B,KAExE9B,EAAa8B,KAAKC,EAAaC,GAI/BD,EAAY/B,GAGpB,MAAOiC,GAEHD,EAAcC,aAIbC,IACDpB,EAAYG,QACZhB,EAAaa,EAAYE,OAGzBd,EAAcY,EAAYU,gBAKzBW,QACDC,KACA3B,MAKuB,mBAHvB2B,EAAUzB,EACJA,EAAc0B,QACdC,KAGc,KADhBF,EAAUA,EAAQtB,WAEPoB,SAKfE,EAAUrC,EAASwC,MAEnBnC,EAAW,GACXA,IAEmB,iBAAZgC,GAAwBA,EAAU,EACzCX,KAGAX,EAAYQ,MAAO,EACnBnB,EAAYqC,WAAWf,EAAaW,aAInCL,EAAYP,OAQbiB,EAPJ3B,EAAYU,MAAQA,EACpBV,EAAYK,OAAOuB,KAAK,OACpBlB,EACAmB,MAAM,IAAIC,MAAOC,YAErB/B,EAAYG,SAAU,EACtBH,EAAYS,WAAY,EAElBb,IACF+B,EAAY1C,EAAS0C,UACfrC,EAGwB,mBAAdqC,IACZA,EAAYA,EAAUjB,EAAOV,IAH7B2B,GAAY,GAMhBA,EACAN,IAGAD,aAICF,EAAcc,GACnBhC,EAAYE,MAAQ8B,EACpBhC,EAAYK,OAAOuB,KAAK,CACpB1B,MAAO8B,EACPH,MAAM,IAAIC,MAAOC,YAErB/B,EAAYG,SAAU,EACtBH,EAAYS,WAAY,EAClBwB,qBACFrC,IAAaN,EACb2C,GAAe,EAEc,mBAAjBA,IACZA,EAAeA,EAAaD,EAAQhC,IAEpCiC,EACAZ,IAGAD,WAIRC,IAEOrB,8BAYqBkC,UACrBA,EAAI9B"}