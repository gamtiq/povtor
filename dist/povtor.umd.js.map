{"version":3,"file":"povtor.umd.js","sources":["../src/index.ts"],"sourcesContent":["export type RetryAction = (...args: any[]) => Promise<any> | any;\n\nexport type RetryTest = (value: any) => boolean;\n\nexport interface RetrySettings {\n    action: RetryAction;\n    actionContext?: any;\n    actionParams?: any[];\n    delay?: number;\n    retryAttempts?: number[];\n    retryQty?: number;\n    retryTimeout?: number;\n    retryOnError?: boolean | RetryTest;\n    retryTest?: boolean | RetryTest;\n}\n\nexport interface WithPromiseField {\n    promise: Promise<any>;\n}\n\nexport interface RetryResult extends WithPromiseField {\n    attempt: number;\n    error: any;\n    stop: () => Promise<any>;\n    stopped: boolean;\n    value: any;\n    valueWait: boolean;\n    wait: boolean;\n}\n\nexport function retry(settings: RetrySettings): RetryResult {\n    let actionResult, resultReject, resultResolve, timeoutId;\n    const resultPromise = new Promise(function(resolve, reject) {\n        resultResolve = resolve;\n        resultReject = reject;\n    });\n\n    const { retryTimeout } = settings;\n    let index = 0;\n    let stopped = false;\n\n    let attempts: number;\n    let { retryAttempts } = settings;\n    if (retryAttempts && retryAttempts.length) {\n        attempts = retryAttempts.length + 1;\n    }\n    else {\n        retryAttempts = null;\n        const { retryQty } = settings;\n        if (typeof retryQty === 'number' && retryQty >= 0) {\n            attempts = retryQty + 1;\n        }\n        else {\n            attempts = -1;\n        }\n    }\n\n    function retryAction() {\n        retryResult.attempt = ++index;\n        retryResult.wait = false;\n        retryResult.valueWait = true;\n        try {\n            actionResult = settings.action.apply(settings.actionContext || null, settings.actionParams || []);\n            if (actionResult && typeof actionResult === 'object' && typeof actionResult.then === 'function') {\n                actionResult.then(onActionEnd, onActionError);\n            }\n            else {\n                onActionEnd(actionResult);\n            }\n        }\n        catch (e) {\n            onActionError(e);\n        }\n    }\n\n    function repeat() {\n        let timeout;\n        if (index) {\n            timeout = retryAttempts\n                ? retryAttempts.shift()\n                : retryTimeout;\n        }\n        else {\n            timeout = settings.delay;\n        }\n        if (attempts > 0) {\n            attempts--;\n        }\n        if (typeof timeout !== 'number' || timeout < 0) {\n            retryAction();\n        }\n        else {\n            retryResult.wait = true;\n            timeoutId = setTimeout(retryAction, timeout);\n        }\n    }\n\n    function onActionEnd(value: any) {\n        retryResult.value = value;\n        retryResult.valueWait = false;\n        let retryTest: any;\n        if (! stopped) {\n            retryTest = settings.retryTest;\n            if (! attempts) {\n                retryTest = false;\n            }\n            else if (typeof retryTest === 'function') {\n                retryTest = retryTest(value);\n            }\n        }\n        if (retryTest) {\n            repeat();\n        }\n        else {\n            resultResolve(value);\n        }\n    }\n\n    function onActionError(reason: any) {\n        retryResult.error = reason;\n        retryResult.valueWait = false;\n        let { retryOnError } = settings;\n        if (stopped || ! attempts) {\n            retryOnError = false;\n        }\n        else if (typeof retryOnError === 'function') {\n            retryOnError = retryOnError(reason);\n        }\n        if (retryOnError) {\n            repeat();\n        }\n        else {\n            resultReject(reason);\n        }\n    }\n\n    function stopRetry() {\n        if (! stopped) {\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n                retryResult.wait = false;\n            }\n            stopped = retryResult.stopped = true;\n            if (! retryResult.valueWait) {\n                resultResolve(retryResult.value);\n            }\n        }\n\n        return resultPromise;\n    }\n\n    const retryResult: RetryResult = {\n        attempt: index,\n        error: actionResult,\n        promise: resultPromise,\n        stop: stopRetry,\n        stopped: false,\n        value: actionResult,\n        valueWait: false,\n        wait: false\n    };\n\n    repeat();\n\n    return retryResult;\n}\n\nexport function getPromiseField(obj: WithPromiseField): Promise<any> {\n    return obj.promise;\n}\n"],"names":["settings","actionResult","resultReject","resultResolve","timeoutId","attempts","resultPromise","Promise","resolve","reject","retryTimeout","index","stopped","retryAttempts","length","retryQty","retryResult","attempt","wait","valueWait","action","apply","actionContext","actionParams","then","onActionEnd","onActionError","e","timeout","shift","delay","retryAction","setTimeout","value","retryTest","repeat","reason","error","retryOnError","promise","stop","clearTimeout","obj"],"mappings":"0MA8BsBA,GAClB,IAAIC,EAAcC,EAAcC,EAAeC,EAU3CC,EATEC,EAAgB,IAAIC,QAAQ,SAASC,EAASC,GAChDN,EAAgBK,EAChBN,EAAeO,IAGXC,iBACJC,EAAQ,EACRC,GAAU,EAGRC,kBACN,GAAIA,GAAiBA,EAAcC,OAC/BT,EAAWQ,EAAcC,OAAS,MAEjC,CACDD,EAAgB,KACR,IAAAE,aAEJV,EADoB,iBAAbU,GAAyBA,GAAY,EACjCA,EAAW,GAGV,EAIpB,aACIC,EAAYC,UAAYN,EACxBK,EAAYE,MAAO,EACnBF,EAAYG,WAAY,EACxB,KACIlB,EAAeD,EAASoB,OAAOC,MAAMrB,EAASsB,eAAiB,KAAMtB,EAASuB,oBAClC,iBAAjBtB,GAA0D,mBAAtBA,EAAauB,KACxEvB,EAAauB,KAAKC,EAAaC,GAG/BD,EAAYxB,SAGb0B,GACHD,EAAcC,IAItB,aACI,IAAIC,EAEAA,EADAjB,EACUE,EACJA,EAAcgB,QACdnB,EAGIV,EAAS8B,MAEnBzB,EAAW,GACXA,IAEmB,iBAAZuB,GAAwBA,EAAU,EACzCG,KAGAf,EAAYE,MAAO,EACnBd,EAAY4B,WAAWD,EAAaH,IAI5C,WAAqBK,GAGjB,IAAIC,EAFJlB,EAAYiB,MAAQA,EACpBjB,EAAYG,WAAY,EAElBP,IACFsB,EAAYlC,EAASkC,UACf7B,EAGwB,mBAAd6B,IACZA,EAAYA,EAAUD,IAHtBC,GAAY,GAMhBA,EACAC,IAGAhC,EAAc8B,GAItB,WAAuBG,GACnBpB,EAAYqB,MAAQD,EACpBpB,EAAYG,WAAY,EAClB,IAAAmB,iBACF1B,IAAaP,EACbiC,GAAe,EAEc,mBAAjBA,IACZA,EAAeA,EAAaF,IAE5BE,EACAH,IAGAjC,EAAakC,GAmBrB,IAAMpB,GACFC,QAASN,EACT0B,MAAOpC,EACPsC,QAASjC,EACTkC,KAnBJ,WAYI,OAXM5B,IACER,IACAqC,aAAarC,GACbY,EAAYE,MAAO,GAEvBN,EAAUI,EAAYJ,SAAU,EAC1BI,EAAYG,WACdhB,EAAca,EAAYiB,QAI3B3B,GAQPM,SAAS,EACTqB,MAAOhC,EACPkB,WAAW,EACXD,MAAM,GAKV,OAFAiB,IAEOnB,qBAGX,SAAgC0B,GAC5B,OAAOA,EAAIH"}