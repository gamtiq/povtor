{"version":3,"file":"povtor.umd.js","sources":["../src/index.ts"],"sourcesContent":["export type RetryAction = (...args: unknown[]) => Promise<unknown> | unknown;\n\nexport type RetryTest = (value: unknown) => boolean;\n\nexport interface RetrySettings {\n    /** A function that should be called. */\n    action: RetryAction;\n    actionContext?: unknown;\n    actionParams?: unknown[];\n    delay?: number;\n    retryAttempts?: number[];\n    retryQty?: number;\n    retryTimeout?: number;\n    retryOnError?: boolean | RetryTest;\n    retryTest?: boolean | RetryTest;\n}\n\nexport interface WithPromiseField {\n    promise: Promise<unknown>;\n}\n\nexport interface RetryResult extends WithPromiseField {\n    attempt: number;\n    error: unknown;\n    stop: () => Promise<unknown>;\n    stopped: boolean;\n    value: unknown;\n    valueWait: boolean;\n    wait: boolean;\n}\n\nexport function retry(settings: RetrySettings): RetryResult {\n    let actionResult, resultReject, resultResolve, timeoutId;\n    // eslint-disable-next-line func-names, prefer-arrow-callback\n    const resultPromise = new Promise(function(resolve, reject) {\n        resultResolve = resolve;\n        resultReject = reject;\n    });\n\n    const { retryTimeout } = settings;\n    let index = 0;\n    let stopped = false;\n\n    let attempts: number;\n    let { retryAttempts } = settings;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/prefer-optional-chain\n    if (retryAttempts && retryAttempts.length) {\n        attempts = retryAttempts.length + 1;\n    }\n    else {\n        retryAttempts = null;\n        const { retryQty } = settings;\n        if (typeof retryQty === 'number' && retryQty >= 0) {\n            attempts = retryQty + 1;\n        }\n        else {\n            attempts = -1;\n        }\n    }\n\n    function stopRetry(): Promise<unknown> {\n        if (! stopped) {\n            /* eslint-disable @typescript-eslint/no-use-before-define */\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n                retryResult.wait = false;\n            }\n            stopped = retryResult.stopped = true;\n            if (! retryResult.valueWait) {\n                resultResolve(retryResult.value);\n            }\n            /* eslint-enable @typescript-eslint/no-use-before-define */\n        }\n\n        return resultPromise;\n    }\n\n    const retryResult: RetryResult = {\n        attempt: index,\n        error: actionResult,\n        promise: resultPromise,\n        stop: stopRetry,\n        stopped: false,\n        value: actionResult,\n        valueWait: false,\n        wait: false\n    };\n\n    function retryAction(): void {\n        retryResult.attempt = ++index;\n        retryResult.wait = false;\n        retryResult.valueWait = true;\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            actionResult = settings.action.apply(settings.actionContext || null, settings.actionParams || []);\n            if (actionResult && typeof actionResult === 'object' && typeof actionResult.then === 'function') {\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                actionResult.then(onActionEnd, onActionError);\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                onActionEnd(actionResult);\n            }\n        }\n        catch (e) {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            onActionError(e);\n        }\n    }\n\n    function repeat(): void {\n        let timeout;\n        if (index) {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            timeout = retryAttempts\n                ? retryAttempts.shift()\n                : retryTimeout;\n        }\n        else {\n            timeout = settings.delay;\n        }\n        if (attempts > 0) {\n            attempts--;\n        }\n        if (typeof timeout !== 'number' || timeout < 0) {\n            retryAction();\n        }\n        else {\n            retryResult.wait = true;\n            timeoutId = setTimeout(retryAction, timeout);\n        }\n    }\n\n    function onActionEnd(value: unknown): void {\n        retryResult.value = value;\n        retryResult.valueWait = false;\n        let retryTest: unknown;\n        if (! stopped) {\n            retryTest = settings.retryTest;\n            if (! attempts) {\n                retryTest = false;\n            }\n            else if (typeof retryTest === 'function') {\n                retryTest = retryTest(value);\n            }\n        }\n        if (retryTest) {\n            repeat();\n        }\n        else {\n            resultResolve(value);\n        }\n    }\n\n    function onActionError(reason: unknown): void {\n        retryResult.error = reason;\n        retryResult.valueWait = false;\n        let { retryOnError } = settings;\n        if (stopped || ! attempts) {\n            retryOnError = false;\n        }\n        else if (typeof retryOnError === 'function') {\n            retryOnError = retryOnError(reason);\n        }\n        if (retryOnError) {\n            repeat();\n        }\n        else {\n            resultReject(reason);\n        }\n    }\n\n    repeat();\n\n    return retryResult;\n}\n\nexport function getPromiseField(obj: WithPromiseField): Promise<unknown> {\n    return obj.promise;\n}\n"],"names":["settings","actionResult","resultReject","resultResolve","timeoutId","attempts","resultPromise","Promise","resolve","reject","index","stopped","retryAttempts","length","retryQty","retryResult","attempt","error","promise","stop","clearTimeout","wait","valueWait","value","retryAction","action","apply","actionContext","actionParams","then","onActionEnd","onActionError","e","repeat","timeout","shift","retryTimeout","delay","setTimeout","retryTest","reason","retryOnError","obj"],"mappings":"0MA+BsBA,OACdC,EAAcC,EAAcC,EAAeC,EAW3CC,EATEC,EAAgB,IAAIC,QAAQ,SAASC,EAASC,GAChDN,EAAgBK,EAChBN,EAAeO,qBAIfC,EAAQ,EACRC,GAAU,uBAKVC,GAAiBA,EAAcC,OAC/BR,EAAWO,EAAcC,OAAS,MAEjC,CACDD,EAAgB,KACRE,iBAEJT,EADoB,iBAAbS,GAAyBA,GAAY,EACjCA,EAAW,GAGV,MAqBdC,EAA2B,CAC7BC,QAASN,EACTO,MAAOhB,EACPiB,QAASZ,EACTa,uBApBMR,IAEEP,IACAgB,aAAahB,GACbW,EAAYM,MAAO,GAEvBV,EAAUI,EAAYJ,SAAU,EAC1BI,EAAYO,WACdnB,EAAcY,EAAYQ,QAK3BjB,GAQPK,SAAS,EACTY,MAAOtB,EACPqB,WAAW,EACXD,MAAM,YAGDG,IACLT,EAAYC,UAAYN,EACxBK,EAAYM,MAAO,EACnBN,EAAYO,WAAY,OAGpBrB,EAAeD,EAASyB,OAAOC,MAAM1B,EAAS2B,eAAiB,KAAM3B,EAAS4B,cAAgB,MAClD,iBAAjB3B,GAA0D,mBAAtBA,EAAa4B,KAExE5B,EAAa4B,KAAKC,EAAaC,GAI/BD,EAAY7B,GAGpB,MAAO+B,GAEHD,EAAcC,aAIbC,QACDC,EAGAA,EAFAxB,EAEUE,EACJA,EAAcuB,QACdC,EAGIpC,EAASqC,MAEnBhC,EAAW,GACXA,IAEmB,iBAAZ6B,GAAwBA,EAAU,EACzCV,KAGAT,EAAYM,MAAO,EACnBjB,EAAYkC,WAAWd,EAAaU,aAInCJ,EAAYP,OAGbgB,EAFJxB,EAAYQ,MAAQA,EACpBR,EAAYO,WAAY,EAElBX,IACF4B,EAAYvC,EAASuC,UACflC,EAGwB,mBAAdkC,IACZA,EAAYA,EAAUhB,IAHtBgB,GAAY,GAMhBA,EACAN,IAGA9B,EAAcoB,YAIbQ,EAAcS,GACnBzB,EAAYE,MAAQuB,EACpBzB,EAAYO,WAAY,EAClBmB,qBACF9B,IAAaN,EACboC,GAAe,EAEc,mBAAjBA,IACZA,EAAeA,EAAaD,IAE5BC,EACAR,IAGA/B,EAAasC,UAIrBP,IAEOlB,8BAGqB2B,UACrBA,EAAIxB"}